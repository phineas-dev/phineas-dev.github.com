---
import { getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import type { Post } from '../../content/types';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const sortedPosts = posts.sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
  );

  return sortedPosts.map((post, index) => {
    // For previous post: if we're not at the last post, get next one, otherwise wrap to first
    const prevPost =
      index < sortedPosts.length - 1 ? sortedPosts[index + 1] : sortedPosts[0];

    // For next post: if we're not at the first post, get previous one, otherwise wrap to last
    const nextPost =
      index > 0 ? sortedPosts[index - 1] : sortedPosts[sortedPosts.length - 1];

    return {
      params: { slug: post.slug },
      props: {
        post,
        prevPost,
        nextPost,
      },
    };
  });
}

type Props = {
  post: Post;
  prevPost: Post;
  nextPost: Post;
};

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await post.render();

// Function to generate URL-friendly ID from heading text
function generateId(text: string) {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}

// Automatically generate sections from post
const sections = post.body.split('\n')
  .map((line) => line.trim())
  .filter((line) => line.startsWith('#'))
  .filter((line) => !line.startsWith('###'))
  .map((line) => {
    const title = line.replaceAll('#', '').trim();
    return {
      id: generateId(title),
      title: title
    };
  }) || [];
---

<BlogPost {...post.data} slug={post.slug} prevPost={prevPost} nextPost={nextPost} sections={sections}>  
  <article class="max-w-4xl mx-auto">  
    <Content />
  </article>
</BlogPost>
