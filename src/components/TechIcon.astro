---
interface Props {
  class?: string;
  color: string;
}

const { class: className = '', color } = Astro.props;
const gradientId = `tech-icon-gradient-${Math.random().toString(36).slice(2, 11)}`;

// Extract colors from linear-gradient string
const match = color.match(/^linear-gradient\((.*?),\s*(.*?),\s*(.*?)\)$/);
const startColor = match ? match[2].trim() : color;
const endColor = match ? match[3].trim() : color;
---

<svg 
  class={`relative ${className}`}
  viewBox="0 0 24 24" 
  fill="none" 
  xmlns="http://www.w3.org/2000/svg"
>
  <defs>
    <linearGradient id={gradientId} gradientTransform="rotate(45)">
      <stop offset="0%" style={`stop-color: ${startColor}`} />
      <stop offset="100%" style={`stop-color: ${endColor}`} />
    </linearGradient>
  </defs>
  <path
    d="M2 4C2 2.89543 2.89543 2 4 2H20C21.1046 2 22 2.89543 22 4V20C22 21.1046 21.1046 22 20 22H4C2.89543 22 2 21.1046 2 20V4Z"
    stroke={`url(#${gradientId})`}
    stroke-width="1.25"
    stroke-linecap="round"
    stroke-linejoin="round"
  />
  <path
    d="M8 9L12 7L16 9M8 9V15L12 17M8 9L12 11M12 17L16 15V9M12 17V11M12 11L16 9"
    stroke={`url(#${gradientId})`}
    stroke-width="1.25"
    stroke-linecap="round"
    stroke-linejoin="round"
  />
</svg>
