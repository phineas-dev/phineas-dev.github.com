---
interface Props {
  class?: string;
  color: string;
}

const { class: className = '', color } = Astro.props;
const gradientId = `project-icon-gradient-${Math.random().toString(36).substr(2, 9)}`;

// Extract colors from linear-gradient string
const match = color.match(/^linear-gradient\((.*?),\s*(.*?),\s*(.*?)\)$/);
const startColor = match ? match[2].trim() : color;
const endColor = match ? match[3].trim() : color;
---

<div class={`relative ${className}`}>
  <svg 
    class="w-full h-full"
    viewBox="0 0 24 24" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
  >
    <defs>
      <linearGradient id={gradientId} gradientTransform="rotate(45)">
        <stop offset="0%" style={`stop-color: ${startColor}`} />
        <stop offset="100%" style={`stop-color: ${endColor}`} />
      </linearGradient>
    </defs>
    <path
      d="M2 6C2 4.89543 2.89543 4 4 4H8L10.5858 6.58579C10.9609 6.96086 11.4696 7.17157 12 7.17157H20C21.1046 7.17157 22 8.067 22 9.17157V18C22 19.1046 21.1046 20 20 20H4C2.89543 20 2 19.1046 2 18V6Z"
      stroke={`url(#${gradientId})`}
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
    <path
      d="M12 11V16M12 16L9 13M12 16L15 13"
      stroke={`url(#${gradientId})`}
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
    />
  </svg>
</div>
