---
import FormattedDate from './FormattedDate.astro';
import Tag from './Tag.astro';
import type { Post } from '../content/types';
import TechIcon from './TechIcon.astro';
import { calculateReadTime } from '../utils/readTime';

interface Props {
  post: Post;
  baseUrl: string;
  variant?: 'default' | 'featured';
  color: string;
}

const { post, baseUrl, variant = 'default', color = 'linear-gradient(to right, #16a34a, #1d4ed8)' } = Astro.props;
const { title, subtitle, pubDate, description, tags } = post.data;

// Calculate read time based on description and title since we don't have access to full content here
const readTime = calculateReadTime(post.body);

const containerClasses = {
  default: 'group block bg-white dark:bg-gray-950/50 rounded-lg p-6',
  featured: 'group block bg-white dark:bg-gray-950/50 rounded-lg p-6',
}[variant];

const titleClasses = {
  default:
    'heading-3 text-gray-700 dark:text-gray-100 group-hover:text-cyan-600 dark:group-hover:text-cyan-300 transition-all duration-300',
  featured:
    'heading-2 text-gray-700 dark:text-gray-100 group-hover:text-cyan-600 dark:group-hover:text-cyan-300 transition-all duration-300',
}[variant];

const subtitleClasses = {
  default:
    'text-content-small text-gray-500 dark:text-gray-400 line-clamp-1',
  featured:
    'text-content text-gray-500 dark:text-gray-400 line-clamp-1',
}[variant];

const descriptionClasses = {
  default:
    'text-content text-gray-500 dark:text-gray-400 line-clamp-3',
  featured:
    'text-content text-gray-500 dark:text-gray-400 line-clamp-4',
}[variant];
---

<a href={`${baseUrl}${post.slug}`} class={containerClasses}>
  <div class="space-y-2">
    <div class="flex items-center justify-between text-content-xs text-gray-400 dark:text-gray-400">
      <FormattedDate date={pubDate} />
      <span class="flex items-center gap-1">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        {readTime} min read
      </span>
    </div>
    <div class="flex mb-2 items-center space-y-0.5">
      <TechIcon color={color} class={variant === 'featured' ? "h-16 w-16 mr-4" : "h-8 w-8 mr-2"} />
      <div>
        <h2 class={`${titleClasses}`}>
          <div>{title}</div>
        </h2>
        {subtitle && variant === 'featured' && <p class={subtitleClasses}>{subtitle}</p>}
      </div>
    </div>
    {(variant === 'default' || variant === 'featured' || variant === 'no-image') && 
      <p class={descriptionClasses}>{description}</p>
    }
  </div>
  {tags && tags.length > 0 && (
    <div class="flex flex-wrap gap-2 mt-4">
      {/* {tags.filter(tag => tag && tag.length > 0).map(tag => (
        <Tag tag={tag} />
      ))} */}
    </div>
  )}
</a>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
