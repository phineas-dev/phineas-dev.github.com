---
interface Props {
	sections: Array<{
		id: string;
		title: string;
	}>;
}

const { sections } = Astro.props;
---

<nav class="hidden xl:block fixed right-[max(1rem,calc((100vw-85rem)/2+1rem))] top-32 space-y-2 w-48">
  <div class="rounded-lg bg-white/20 dark:bg-black/15 p-4 ring-1 ring-gray-900/5 dark:ring-white/5">
    <h2 class="heading-2 text-gray-800 dark:text-gray-200 mb-4">On this page</h2>
    <div class="max-h-[60vh] overflow-y-auto pr-2 -mr-2">
      {sections.map(section => (
        <a
          href={`#${section.id}`}
          data-section-link={section.id}
          class="block py-2 text-sm text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 transition-colors"
        >
          {section.title}
        </a>
      ))}
    </div>
  </div>
</nav>

<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .overflow-y-auto::-webkit-scrollbar {
    width: 4px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.3);
    border-radius: 2px;
  }

  /* Hide scrollbar for Firefox */
  .overflow-y-auto {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.3) transparent;
  }
</style>

<script>
  const sectionLinks = document.querySelectorAll('[data-section-link]');
  const sections = document.querySelectorAll('[id]');

  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -80% 0px',
    threshold: 0
  };

  function updateActiveSection(entries: IntersectionObserverEntry[]) {
    entries.forEach(entry => {
      const id = entry.target.getAttribute('id')?.toLowerCase();
      const link = document.querySelector(`[data-section-link="${id}"]`);
      
      if (entry.isIntersecting && link) {
        // Remove active class from all links
        sectionLinks.forEach(link => {
          link.classList.remove('text-gray-950', 'dark:text-gray-100', 'font-medium');
          link.classList.add('text-gray-600', 'dark:text-gray-400');
        });
        
        // Add active class to current link
        link.classList.remove('text-gray-600', 'dark:text-gray-400');
        link.classList.add('text-gray-950', 'dark:text-gray-100', 'font-medium');
      }
    });
  }

  const observer = new IntersectionObserver(updateActiveSection, observerOptions);
  sections.forEach(section => observer.observe(section));
</script>
