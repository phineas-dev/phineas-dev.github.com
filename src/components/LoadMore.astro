---
interface Props {
  initialPosts: number;
  totalPosts: number;
  type?: 'posts' | 'experiences';
}

const { initialPosts, totalPosts, type = 'posts' } = Astro.props;
---

<div class="flex justify-center mt-8" id="load-more-container">
  {totalPosts > initialPosts && (
    <button
      id="load-more-button"
      class="px-6 py-3 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200 text-gray-900 dark:text-gray-100"
    >
      Load More {type === 'experiences' ? 'Experience' : 'Posts'}
    </button>
  )}
</div>

<script define:vars={{ initialPosts, totalPosts, type }}>
  let currentlyShown = initialPosts;
  
  document.getElementById('load-more-button')?.addEventListener('click', () => {
    const items = document.querySelectorAll(type === 'experiences' ? '.experience-item' : '.post-item');
    const separators = document.querySelectorAll('.experience-separator');
    const hiddenItems = Array.from(items).slice(currentlyShown);
    
    // Show next batch of items (6 for posts, 2 for experiences)
    const batchSize = type === 'experiences' ? 2 : 6;
    for (let i = 0; i < batchSize && i < hiddenItems.length; i++) {
      hiddenItems[i].classList.remove('hidden');
      // Show separator if it exists
      if (type === 'experiences' && separators[currentlyShown + i - 1]) {
        separators[currentlyShown + i - 1].classList.remove('hidden');
      }
    }
    
    currentlyShown += batchSize;
    
    // Hide button if all items are shown
    if (currentlyShown >= totalPosts) {
      document.getElementById('load-more-button')?.remove();
    }
  });
</script>
