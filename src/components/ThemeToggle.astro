---
---

<div class="flex gap-4 items-center flex-row-reverse">
  <button
    id="theme-toggle"
    type="button"
    class="inline-flex items-center justify-center w-10 h-10 rounded-lg text-gray-500 hover:text-gray-900 dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-cyan-500 transition-colors"
    aria-label="Toggle theme"
  >
    <!-- sun -->
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      class="h-5 w-5 theme-light" 
      viewBox="0 0 20 20" 
      fill="currentColor"
      aria-hidden="true"
    >
      <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
    </svg>
    <!-- moon -->
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      class="h-5 w-5 theme-dark" 
      viewBox="0 0 20 20" 
      fill="currentColor"
      aria-hidden="true"
    >
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
    <!-- monitor -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 theme-system"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
    >
      <path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z" clip-rule="evenodd" />
    </svg>
    <span class="sr-only" id="theme-toggle-label">
      Use light theme
    </span>
  </button>

    <div id="theme-message" class="top-[14px] right-20 opacity-0 transition-opacity duration-300 ease-in-out pointer-events-none text-content-small px-3 py-1.5 rounded-md bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400"></div>
</div>

<script>
  type Theme = 'light' | 'dark' | 'system';

  let hideMessageTimeout: number | undefined;

  function getSystemTheme(): 'light' | 'dark' {
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  function getStoredTheme(): Theme {
    return localStorage.getItem('theme') as Theme || 'system';
  }

  function showThemeMessage(message: string) {
    const messageEl = document.getElementById('theme-message');
    if (!messageEl) return;

    // Clear any existing timeout
    if (hideMessageTimeout) {
      clearTimeout(hideMessageTimeout);
    }

    messageEl.textContent = message;
    messageEl.style.opacity = '1';

    hideMessageTimeout = window.setTimeout(() => {
      messageEl.style.opacity = '0';
      hideMessageTimeout = undefined;
    }, 2000);
  }

  function setTheme(newTheme: Theme, showMessage = false) {
    const root = document.documentElement;
    const isDark = newTheme === 'dark' || (newTheme === 'system' && getSystemTheme() === 'dark');
    
    root.classList.toggle('dark', isDark);
    
    if (newTheme === 'system') {
      localStorage.removeItem('theme');
    } else {
      localStorage.setItem('theme', newTheme);
    }

    // Update icons visibility
    document.querySelector('.theme-light')?.classList.toggle('hidden', newTheme !== 'light');
    document.querySelector('.theme-dark')?.classList.toggle('hidden', newTheme !== 'dark');
    document.querySelector('.theme-system')?.classList.toggle('hidden', newTheme !== 'system');

    // Update aria-label
    const label = document.getElementById('theme-toggle-label');
    if (label) {
      const labels = {
        light: 'Use dark theme',
        dark: 'Use system theme',
        system: 'Use light theme'
      };
      label.textContent = labels[newTheme];
    }

    // Show theme message only if requested
    if (showMessage) {
      const messages = {
        light: 'Light theme enabled',
        dark: 'Dark theme enabled',
        system: 'System theme enabled'
      };
      showThemeMessage(messages[newTheme]);
      
      // Announce theme change to screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('role', 'status');
      announcement.setAttribute('aria-live', 'polite');
      announcement.className = 'sr-only';
      announcement.textContent = messages[newTheme];
      document.body.appendChild(announcement);
      setTimeout(() => announcement.remove(), 1000);
    }
  }

  // Initialize theme without showing message
  const currentTheme = getStoredTheme();
  setTheme(currentTheme, false);

  // Handle theme toggle click
  const toggle = document.getElementById('theme-toggle');
  if (toggle) {
    toggle.addEventListener('click', () => {
      const currentTheme = getStoredTheme();
      const nextTheme: Theme = currentTheme === 'light' ? 'dark' : currentTheme === 'dark' ? 'system' : 'light';
      setTheme(nextTheme, true);
    });
  }

  // Handle system theme changes
  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  mediaQuery.addEventListener('change', () => {
    const currentTheme = getStoredTheme();
    if (currentTheme === 'system') {
      setTheme('system', true);
    }
  });
</script>

<style>
  .theme-light:not(.hidden) ~ .theme-dark,
  .theme-light:not(.hidden) ~ .theme-system,
  .theme-dark:not(.hidden) ~ .theme-light,
  .theme-dark:not(.hidden) ~ .theme-system,
  .theme-system:not(.hidden) ~ .theme-light,
  .theme-system:not(.hidden) ~ .theme-dark {
    display: none;
  }
</style>
