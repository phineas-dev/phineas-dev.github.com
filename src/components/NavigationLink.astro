---
import type { Post } from '../content/types';

interface Props {
  post?: Post | null;
  baseUrl: string;
  direction: 'prev' | 'next' | 'back';
}

const { post, baseUrl, direction } = Astro.props;

function generateShortTitle(title: string) {
  return title.split(':')[0].trim();
}

const isNext = direction === 'next';
const isBack = direction === 'back';
const label = isNext ? 'Next post' : isBack ? 'Back to' : 'Previous post';
const classes = `group flex items-center gap-1 md:gap-2 ${isNext ? 'text-right' : ''} text-gray-600 dark:text-gray-400 hover:text-cyan-700 dark:hover:text-cyan-300 transition-all duration-200 ease-in-out`;

const href = post ? `${baseUrl}/${post.slug}` : baseUrl;
---

<a href={href} class={classes}>
  {!isNext && (
    direction === 'back' ? (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 md:w-5 md:h-5 transition-transform group-hover:-translate-y-1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15l7.5-7.5 7.5 7.5" />
      </svg>
    ) : (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 md:w-5 md:h-5 transition-transform group-hover:-translate-x-1">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 4.5l-7.5 7.5 7.5 7.5" />
      </svg>
    )
  )}
  <span class="text-xs md:text-sm">
    <span class="hidden md:block text-xs text-gray-500 dark:text-gray-500">{label}</span>
    {post ? generateShortTitle(post.data.title) : <slot />}
  </span>
  {isNext && (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 md:w-5 md:h-5 transition-transform group-hover:translate-x-1">
      <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
    </svg>
  )}
</a>
